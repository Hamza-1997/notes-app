{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+KAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,QCPpCI,EAAU,oDAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCgE9BK,EA1EH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAAqBjB,MAAK,SAACkB,GACzBP,EAASO,QAEV,IAkBHC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAkBMC,EAAcR,EAAUJ,EAAQA,EAAMa,QAAO,SAAChC,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMmB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAACjC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnDD,SAACa,GAC1B,IAAMd,EAAOmB,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAErB,KAAOA,KAClCsB,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAChDyB,QAAQC,IAAI,cAAeO,GAE3BV,EACUZ,EAAIsB,GACX3B,MAAK,SAAC4B,GACLjB,EAASD,EAAMc,KAAI,SAACjC,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAOqC,SAEvDC,OAAM,SAACC,GACNC,MAAM,aAAD,OAAcxC,EAAKI,QAAnB,sCACLgB,EAASD,EAAMa,QAAO,SAACG,GAAD,OAAOA,EAAErB,KAAOA,SAuCV2B,CAAmBzC,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAM4B,SArCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASiB,EACTyB,MAAM,IAAIC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,IAE7BxB,EAAmBmB,GAAYpC,MAAK,SAAC4B,GACnCjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA4BX,UACE,uBAAO8B,MAAO/B,EAASgC,SAzBJ,SAACV,GACxBf,QAAQC,IAAIc,EAAMW,OAAOF,OACzB9B,EAAWqB,EAAMW,OAAOF,UAwBpB,wBAAQG,KAAK,SAAb,yBCtERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7d444eda.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"https://quiet-coast-84159.herokuapp.com/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n    console.log(\"changedNote\", changedNote);\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}